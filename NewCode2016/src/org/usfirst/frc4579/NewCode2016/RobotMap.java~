// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.NewCode2016;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AnalogPotentiometer lifterliftPotentiometer;
    public static SpeedController lifterliftMotor;
    public static Solenoid lifterArmExtension;
    public static AnalogInput measurementultrasonic;
    public static SpeedController drivetrainleftMotor;
    public static SpeedController drivetrainrightMotor;
    public static RobotDrive drivetraindrive;
    public static SpeedController shootershootMotor;
    public static SpeedController loaderloaderMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static final double SHOOT_SPEED = 1.0;
    public static final double CHAMBER_SPEED = 0.7; // "CHAMBERING" != "LOADING"; "CHAMBERING" IS PUTTING THE BALL INTO THE SHOOTER AFTER SPOOL-UP
    public static final double LOAD_SPEED = 0.5; // SPEED TO LOAD BALL INTO LOADER MECHANISM
    
    public static final double SHOOT_DELAY = 2.5; // TIME FOR SHOOTER TO RUN
    public static final double CHAMBER_DELAY = 2.0; // TIME FOR SHOOTER TO SPOOL
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        lifterliftPotentiometer = new AnalogPotentiometer(0, 305.0, 0.0);
        LiveWindow.addSensor("Lifter", "liftPotentiometer", lifterliftPotentiometer);
        
        lifterliftMotor = new Talon(3);
        LiveWindow.addActuator("Lifter", "liftMotor", (Talon) lifterliftMotor);
        
        lifterArmExtension = new Solenoid(1, 4);
        LiveWindow.addActuator("Lifter", "ArmExtension", lifterArmExtension);
        
        measurementultrasonic = new AnalogInput(1);
        LiveWindow.addSensor("Measurement", "ultrasonic", measurementultrasonic);
        
        drivetrainleftMotor = new Talon(1);
        LiveWindow.addActuator("Drivetrain", "leftMotor", (Talon) drivetrainleftMotor);
        
        drivetrainrightMotor = new Talon(2);
        LiveWindow.addActuator("Drivetrain", "rightMotor", (Talon) drivetrainrightMotor);
        
        drivetraindrive = new RobotDrive(drivetrainleftMotor, drivetrainrightMotor);
        
        drivetraindrive.setSafetyEnabled(true);
        drivetraindrive.setExpiration(0.1);
        drivetraindrive.setSensitivity(0.5);
        drivetraindrive.setMaxOutput(1.0);
        drivetraindrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        drivetraindrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        shootershootMotor = new Talon(0);
        LiveWindow.addActuator("Shooter", "shootMotor", (Talon) shootershootMotor);
        
        loaderloaderMotor = new Talon(4);
        LiveWindow.addActuator("Loader", "loaderMotor", (Talon) loaderloaderMotor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
